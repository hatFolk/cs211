2. Imagine I have a data structure that uses links (like a binary tree or
linked list) to connect nodes to each other. Each node has 2 links coming out
of it: one to the next node, and one to the previous node (assume getters and
setters for these links). The list is -not sorted-. There is a link to the
start and end of the data structure, but no other information is stored or
maintained. For reasons of absurdity, there is an add method for this data
structure, but it adds elements only to the middle of the list. Answer the
following questions in one sentence or less (using the variable N if you need
to - you may NOT make assumptions or declarations about this variable N, that
is, your answers must generalize to any N).

	a. What is the best case (in terms of time) for finding some element in
	this list of size N?

	b. What is the worst case (in terms of time) for finding some element in
	this list of size N?

	c. What is the best case (in terms of time) for adding an element to this
	list of size N?

	d. What is the worst case (in terms of time) for adding an element to this
	list of size N?

	e. Would adding a (static) variable to the data structure that keeps track
	of the size of the list improve the times for C and D?

3. Imagine I have a regular expression as follows. In the questions below,
circle whether or not the string matches the regular expression.
	Regex: ^Hel o(W|w+)orld\.\d\d.+
	
	a. HelloWorld.22
	b. Helooworld.222
	c. Hel.owworld.22k
	d. HelloWWorldk222
	e. Helloolrd.22k
